
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define HYPER LC(LS(LG(LALT)))

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <50>;
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
/ {
    
};


#define BASE 0
#define CHARACTERS 1
#define MAGIC 2
#define FUNCTIONS 3
#define GAME 4

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        base_layer {
            bindings = <
     &kp F1     &kp F2      &kp F3      &kp F4          &kp F5                                                                                  &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
  &kp EQUAL     &kp N1      &kp N2      &kp N3          &kp N4          &kp N5                                                                  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
    &kp TAB     &kp Q       &kp W       &kp E           &kp R           &kp T                                                                   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
    &kp ESC     &hm LALT A &hm LCTRL S &hm LGUI D    &hm LSHIFT F   &kp G                                                                   &kp H   &hm RSHIFT J   &hm RGUI K &hm RCTRL L  &hm RALT SEMI    &kp SQT
  &kp GRAVE     &kp Z       &kp X       &kp C           &kp V           &kp B   &kp LSHFT   &kp LCTRL   &to GAME      &kp LGUI    &kp LBKT   &kp RBKT   &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
 &magic 2 0     &kp HOME    &kp END     &kp LEFT        &kp RIGHT               &kp SPACE   &lower      &kp CAPS    &kp RALT    &kp BSPC    &kp RET          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

                characters_layer {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT   &none                                                                     &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none   &none
       &trans         &none       &none       &none   &none   &none                                                      &none       &none         &none         &none   &none   &none
       &trans         &none   &kp TILDE   &kp GRAVE  &kp EQUAL  &kp UNDER                                                   &kp PLUS   &kp MINUS      &kp LBKT      &kp RBKT     &none   &none
       &trans   &hm LALT N1    &hm LCTRL N2   &hm LGUI N3  &hm LSHIFT N4  &kp N5                                  &kp N6      &hm RSHIFT N7  &hm RGUI N8   &hm RCTRL N9  &hm RALT N0   &none
       &trans      &kp EXCL      &kp AT    &kp HASH   &kp DLLR  &kp PRCNT  &trans  &trans  &trans  &trans  &kp LPAR  &kp RPAR  &kp CARET    &kp AMPS      &kp STAR      &kp LPAR  &kp RPAR   &none
   &magic 2 0         &none       &none       &none   &none          &trans   &to BASE  &trans  &trans   &trans  &trans         &kp PG_UP   &kp PG_DN         &none   &none   &none
            >;
        };


        magic_layer {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3   &to BASE   &none   &none   &none   &none   &none   &none   &none   &none          &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        functions_layer {
            bindings = <
 &none    &none    &none     &none     &none                                                                      &none  &none     &none  &none  &none
 &none    &none    &none     &none     &none  &none                                                    &none    &none  &none     &none  &none  &none
 &none    &kp F13  &kp F14   &kp F15   &kp F16 &kp F17                                                  &none    &none  &none     &none  &none  &none
 &none    &kp LALT  &kp LCTRL &kp LGUI &kp LSHIFT  &none                                                &none    &none  &none &none  &none  &none
 &none    &none    &none     &none     &none  &none  &none  &none  &to BASE  &none  &none  &none        &none    &none  &none     &none  &none  &none
 &none    &none    &none     &none     &none          &none   &none  &none &none   &none  &none                 &none  &none     &none  &none  &none
            >;
        };

        game_layer {
            bindings = <
 &trans     &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans     &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans     &trans  &trans   &kp W  &kp E  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp LSHIFT   &kp A   &kp S   &kp D  &kp F                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans     &kp LCTRL &kp KP_N6  &kp KP_N5  &kp KP_N3  &kp KP_N4  &kp Z  &trans   &to BASE  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans     &trans  &trans  &trans  &trans          &trans   &kp KP_N1  &kp KP_N2  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };


    };
};
